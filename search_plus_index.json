{"./":{"url":"./","title":"平台介绍","keywords":"","body":" 中台开发平台 简介 中台最早由阿里在2015年提出的“大中台，小前台”战略中延伸出来的概念。目的是使前台可以专心创新，不用担心基础却又至关重要的技术支撑问题。 目的 所谓“中台”，其实是为前台而生的平台，它存在的唯一目的就是更好的服务前台规模化创新，进而更好的服务用户，使企业真正做到自身能力与用户需求的持续对接 应用到我们公司，中台的主要目的是减少二次开发的复杂度，统一基础架构，统一开发部署和测试流程，统一运维，尽可能支持更多的使用场景，让前台更加专注于具体的业务需求，提高整体效率。 组成部分 架构基本组成，即提供了哪些基础组件： 模块 功能描述 parent 统一管理模块，所有工程继承基础，提供统一版本管理，配置管理，和公共库管理。 bootstrap 部署入口，集成和打包其他所有模块。公共基础模块，例如日志管理，集群管理，第三方依赖，消息推送，公共服务等。 interface 服务接口层，所有服务公共接口统一管理。 user 用户模块，权限管理 gis 点线面模块 data POI，行政区，路网数据管理 advance 高级组合服务，分单，地址解析等等 custom 定制和二次开发模块，项目使用 var gitalk = new Gitalk({ clientID: '2973ef78e3817bb9904d', clientSecret: 'f22ec25fbf86e712c8bd05e5b30607d809c9a658', repo: 'dituhui-gitbook', owner: 'chamberone', admin: ['chamberone'], id: \"README.md\", title: \"平台介绍\" }); gitalk.render('gitalk-container'); Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-03-20 10:55:18 "},"quickStart.html":{"url":"quickStart.html","title":"快速开始","keywords":"","body":"快速开始 编译安装 访问gitlab：http://gitlab.dituhui.com/mp/middle-platform 下载整个项目源码，然后进入middle-platform项目目录执行： mvn install 生成的jar包在middle-platform-bootstrap/target下，执行命令运行： java -jar middle-platform-bootstrap-0.0.1-SNAPSHOT.jar jar包下载 点击以下链接，下载middle-platform-bootstrap-0.0.1-SNAPSHOT.jar即可： Maven库 或者配置好仓库地址，在项目的pom.xml的dependencies中加入以下内容后自动下载jar包: com.dituhui.middle-platform middle-platform-bootstrap 0.0.1-SNAPSHOT 注意： 平台已经加载spring，所以不能直接在spring项目中再次引入运行，只能独立运行jar。 如果你要二次开发，请下载custom定制模块开发，然后合并打包运行。 docker 命令行执行： sudo docker run -d -v /home/logs:/logs -p 8080:8080 --privileged --name=mp-dev --restart=always 10.0.0.15:5000/mp-dev 然后打开浏览器，访问http://你的host:8080 var gitalk = new Gitalk({ clientID: '2973ef78e3817bb9904d', clientSecret: 'f22ec25fbf86e712c8bd05e5b30607d809c9a658', repo: 'dituhui-gitbook', owner: 'chamberone', admin: ['chamberone'], id: \"quickStart.md\", title: \"快速开始\" }); gitalk.render('gitalk-container'); Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-03-20 12:04:37 "},"dev.html":{"url":"dev.html","title":"开发流程","keywords":"","body":"开发文档 开发流程 当我们从http://gitlab.dituhui.com/mp/middle-platform 下载整个项目源码后，就下来就是考虑怎么开发后台接口了。从工程结构可以知道，只有custom模块是可以基于已有的体系进行扩展，其他模块可以看成系统模块，只能平台维护人员自己修改。 当然也可以不仅限于custom扩展开发，可以吧custom看到demo，参考开发自己的模块，然后集成到系统里面去。 简单示意图： 接口文档 平台自有接口列表： url 功能 /user/login 用户登录 /user/logout 用户登出 /user/register 用户注册 /user/password/update 修改密码 /user/role/query 获取用户角色 /user/role/delete 删除角色 /user/role/add 添加用户角色 var gitalk = new Gitalk({ clientID: '2973ef78e3817bb9904d', clientSecret: 'f22ec25fbf86e712c8bd05e5b30607d809c9a658', repo: 'dituhui-gitbook', owner: 'chamberone', admin: ['chamberone'], id: \"dev.md\", title: \"开发文档\" }); gitalk.render('gitalk-container'); Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-03-19 11:36:29 "},"log.html":{"url":"log.html","title":"日志系统","keywords":"","body":"日志系统 日志是整体设计不可或缺的一部分，不仅仅是简单记录下系统状态，更是后期在线排查问题，精确定位，统计状态，埋点统计，数据分析优化等不可或缺的部分。所以日志系统设计上就应该考虑到后期使用便利性，方便扩展，运维和运营分析。 日志链 日志提供通过唯一id串联整个服务的完整过程，在一定条件下可以还原整个历史调用过程。所以日志系统在生成日志的时候，需要自动获取请求过程中产生的初始ID，并在后续调用中维持ID不变。 日志上下文 每条日志除了记录日志内容外，有些固定系统内容是日志系统自动获取并记录的，不需要使用者关心。比如哪个用户调用，哪个团队调用，用户登录的是哪个平台，用户来源ip，日志链id等等。日志系统从哪里获取，当然就是当前运行环境的上下文中获取，所以日志系统需要具备获取上下文的能力。技术实现上有多种方法，比如共享session，传递方法参数，线程本地threadlocal等等。 拦截器 日志系统记录2种日志： 一种是开发者根据业务需要自己需要记录的日志；一种是服务间调用日志，日志系统通过AOP拦截各个服务关键入口记录日志，比如网关，内部微服务，数据存储服务代理等，统一管理，并不需要使用者关系。拦截器主要是用于第二种系统调用日志。 日志收集搜索ELK 日志收集和展示是日志系统的重要组成部分，采用ELK架构。 主要由3端构成，1是filebeat和logstash采集端，2是es存储端，3是kibana数据展示端。 日志内容规范 不管是用户日志还是系统日志，公共固定字段需要统一下，方便后期统一管理和分析。字段需要包含一些重要信息，比如谁产生的日志，哪个团队，时间，日志产生来源，日志级别，日志内容，谁调用的服务，调用的什么服务，消耗了多少时间等等。 固定字段列表： 字段 描述 traceId 日志链唯一Id，32位随机hash码 userId 用户Id teamId 团队Id，可选 mapId 地图Id，可选 level 级别，debug,info,error,fatal token 登录token t timestamp时间戳 source 来源平台，web,android,ios targetClass 服务类 targetMethod 服务方法 sourceClass 来源类 sourceMethod 来源方法 sourceUrl 来源url sourceIp 来源ip log 用户定义日志 elapse 消耗时间 特殊日志 有些特殊情况不用记录日志，比如压力测试，管理员内部访问等等，这种情况下可以在系统日志上加个标识字段，日志系统收集日志的时候自动过滤掉，不进入日志系统。 var gitalk = new Gitalk({ clientID: '2973ef78e3817bb9904d', clientSecret: 'f22ec25fbf86e712c8bd05e5b30607d809c9a658', repo: 'dituhui-gitbook', owner: 'chamberone', admin: ['chamberone'], id: \"log.md\", title: \"日志系统\" }); gitalk.render('gitalk-container'); Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-05-08 09:09:39 "},"deploy.html":{"url":"deploy.html","title":"如何部署","keywords":"","body":"如何部署 部署以前一直都是很繁重的工作，需要考虑部署结构，预估访问压力和系统瓶颈，并调整分布式架构。除此之外系统依赖的sql数据库和nosql数据库等等，都要预先部署好，然后代码还需要相应的配置才可以连接上对应的机器。 平台的初衷之一也是尽可能简化各种环境下部署工作，不管是在线或者离线环境，然部署人员尽可能的远离具体的机器和具体的配置。 开发环境： graph TD 开发者1-->|提交代码|SVN((代码库)) 开发者2-->|提交代码|SVN 开发者3-->|提交代码|SVN 开发者5(...)-->SVN SVN---|触发自动构建|自动部署 serverless部署 serverless部署方式完全依赖于云服务商，不用关心机器和服务细节，这种方式优点是最简单，但是依赖于服务提供商。 compose部署 这种需要有自己的物理机器，难度介于serverless和全手动之间，需要熟悉compose和docker相关命令，配置好环境后支撑一键启停。 全手动部署 这种不仅要了解部署机器，还需要单独部署系统的各个组件，比如jar包，数据库，redis，zookeeper等等，部署繁琐，但是拥有完整的控制权。 var gitalk = new Gitalk({ clientID: '2973ef78e3817bb9904d', clientSecret: 'f22ec25fbf86e712c8bd05e5b30607d809c9a658', repo: 'dituhui-gitbook', owner: 'chamberone', admin: ['chamberone'], id: \"deploy.md\", title: \"部署\" }); gitalk.render('gitalk-container'); Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-03-19 16:04:49 "},"testing.html":{"url":"testing.html","title":"集成测试","keywords":"","body":"测试 测试是保证产品质量的重要环节，测试主要有单元测试，集成测试 var gitalk = new Gitalk({ clientID: '2973ef78e3817bb9904d', // GitHub Application Client ID clientSecret: 'f22ec25fbf86e712c8bd05e5b30607d809c9a658', // GitHub Application Client Secret repo: 'dituhui-gitbook', owner: 'chamberone', admin: ['chamberone'], id: \"/testing.md\", title: \"集成测试\" }); gitalk.render('gitalk-container'); Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-03-19 16:06:58 "},"helpus.html":{"url":"helpus.html","title":"帮助我们","keywords":"","body":"帮助我们 平台的逐渐演化和完善离不开使用者的反馈和建议。如果您有时间，也愿意完善平台缺失部分，欢迎fork源代码 http://gitlab.dituhui.com/mp/middle-platform ，提交pull request，提供宝贵意见，也可以直接参与平台讨论，一起完善使用体验。 Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-03-19 16:20:29 "},"feedback.html":{"url":"feedback.html","title":"问题反馈","keywords":"","body":"反馈 反馈是平台完善很重要的一部分，不仅代码需要反馈，文档说明也需要反馈。 文档反馈 每个文档下面都会有直接反馈区域，可以直接给作者留言： 代码反馈 如果对源代码有疑问，可以在http://gitlab.dituhui.com/mp/middle-platform 讨论组里面提交issue主题： 或者直接提交pull request。 Copyright © dituhui.com 2020 all right reserved，powered by Gitbook文章修订时间： 2020-03-19 11:55:58 "}}